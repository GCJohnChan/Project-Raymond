<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gordon360</name>
    </assembly>
    <members>
        <member name="M:Gordon360.ApiControllers.ActivityInfoController.Get">
            <summary>
            Get all available information for activities
            </summary>
            <returns></returns>
            <remarks>
            Server makes a call to get a list of all activity information from the database
            </remarks>
        </member>
        <member name="M:Gordon360.ApiControllers.ActivityInfoController.Get(System.String)">
            <summary>Get the activityInfo object whose activity code corresponds to the given parameter</summary>
            <param name="id">The activity code</param>
            <returns></returns>
            <remarks>Get a single activity from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Get">
            <summary>
            Gets all Membership Request Objects
            </summary>
            <returns>List of all requests for membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Get(System.Int32)">
            <summary>
             Gets a specific Membership Request Object
            </summary>
            <param name="id">The ID of the membership request</param>
            <returns>A memberships request with the specified id</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.GetMembershipsRequestsForActivity(System.String)">
            <summary>
            Gets the memberships requests for the specified activity
            </summary>
            <param name="id">The activity code</param>
            <returns>All membership requests associated with the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.GetMembershipsRequestsForStudent(System.String)">
            <summary>
            Gets the memberships requests for the specified student
            </summary>
            <param name="id">The student id</param>
            <returns>All membership requests associated with the student</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Post(Gordon360.Models.REQUEST)">
            <summary>
            Creates a new membership request
            </summary>
            <param name="membershipRequest">The request to be added</param>
            <returns>The added request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Put(System.Int32,Gordon360.Models.REQUEST)">
            <summary>
            Updates a membership request
            </summary>
            <param name="id">The membership request id</param>
            <param name="membershipRequest">The updated membership request object</param>
            <returns>The updated request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.ApproveRequest(System.Int32)">
            <summary>
            Sets a membership request to Approved
            </summary>
            <param name="id">The id of the membership request in question.</param>
            <returns>If successful: THe updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.DenyRequest(System.Int32)">
            <summary>
            Sets the membership request to Denied
            </summary>
            <param name="id">The id of the membership reuqest in question.</param>
            <returns>If successful: THe updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Delete(System.Int32)">
            <summary>
            Delets a membership request
            </summary>
            <param name="id">The id of the membership request to delete</param>
            <returns>The deleted object</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.Get">
            <summary>Get all the roles a person may have within an activity</summary>
            <returns>A list of all the roles and their coresponding acronyms</returns>
            <remarks>Queries the database for all the roles that are valid</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.Get(System.String)">
            <summary>Get a single role and the information about it</summary>
            <param name="id">The identifier for a single role</param>
            <returns>The information about the specified role</returns>
            <remarks>Queries the database and returns information about one particular role</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.Get">
            <summary>Get a list of all sessions</summary>
            <returns>All sessions within the database</returns>
            <remarks>Queries the database for all sessions, current and past</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.Get(System.String)">
            <summary>Get one specific session specified by the id in the URL string</summary>
            <param name="id">The identifier for one specific session</param>
            <returns>The information about one specific session</returns>
            <remarks>Queries the database regarding a specific session with the given identifier</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.GetCurrentSession">
            <summary>
            Gets the current active session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.StudentsController.Get">
            <summary>Get a list of all students in the database</summary>
            <returns>A list of student names, IDs, and emails</returns>
            <remarks>Queries the database for every student record within the student table</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.StudentsController.Get(System.String)">
            <summary>Get information about a single student</summary>
            <param name="id">The Gordon ID of desired student</param>
            <returns>The information about the specified student</returns>
            <remarks>Queries the database for the specific student identified by their Gordon ID</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.StudentsController.GetByEmail(System.String)">
            <summary>Get information about a single student</summary>
            <param name="email">The email of desired student</param>
            <returns>The information about the specified student</returns>
            <remarks>Queries the database for the specific student identified by their email</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.Get">
            <summary>Get all supervisors</summary>
            <returns>All supervisors and their corresponding information</returns>
            <remarks>Queries the database for all supervisors</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.Get(System.Int32)">
            <summary>Get a single supervisor</summary>
            <param name="id">The ID of desired supervisor</param>
            <returns>The supervisor object that has an ID matching the one specified in the URL</returns>
            <remarks>Queries the database for a specific supervisor based on their Gordon ID</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.GetSupervisorsForActivity(System.String)">
            <summary>
            Get the supervisors for a given activity
            </summary>
            <param name="id">The identifier for a specific activity</param>
            <returns></returns>
            <remarks>
            Get the supervisors for a specified activity within the database
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.Put(System.Int32,Gordon360.Models.SUPERVISOR)">
            <summary>Update an existing supervisor</summary>
            <param name="id">The id for an existing supervisor</param>
            <param name="supervisor">The supervisor object to be changed</param>
            <returns>The changed supervisor object</returns>
            <remarks>Queries the database to update one supervisor</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.Post(Gordon360.Models.SUPERVISOR)">
            <summary>Add a new supervisor</summary>
            <param name="supervisor">The name of the new supervisor</param>
            <returns>The new supervisor object</returns>
            <remarks>Queries the database to add a new supervisor into the table</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SupervisorsController.Delete(System.Int32)">
            <summary>Delete a supervisor</summary>
            <param name="id">The ID of supervisor to be deleted</param>
            <returns>The supervisor object that was deleted</returns>
            <remarks>Queries the database to remove the row of the specified supervisor</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.Get">
            <summary>
            Get all available activities
            </summary>
            <returns>All the activities in the databse</returns>
            <remarks></remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.Get(System.String)">
            <summary>Get a single activity based upon the string id entered in the URL</summary>
            <param name="id">An identifier for a single activity</param>
            <returns></returns>
            <remarks>Get a single activity from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetActivitiesForSession(System.String)">
            <summary>Gets the activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find which activities are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Get">
            <summary>
            Get all memberships
            </summary>
            <returns>
            A list of all memberships
            </returns>
            <remarks>
            Server makes call to the database and returns all current memberships
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Get(System.Int32)">
            <summary>
            Get a single membership based on the id given
            </summary>
            <param name="id">The id of a membership within the database</param>
            <remarks>Queries the database about the specified membership</remarks>
            <returns>The information about one specific membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetMembershipsForActivity(System.String)">
            <summary>
            Get all the memberships associated with a given activity
            </summary>
            <param name="id">The activity ID</param>
            <returns>IHttpActionResult</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetLeadersForActivity(System.String)">
            <summary>
            Gets the leader-type memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Post(Gordon360.Models.MEMBERSHIP)">
            <summary>Create a new membership item to be added to database</summary>
            <param name="membership">The membership item containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new membership to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetMembershipsForStudent(System.String)">
            <summary>Fetch memberships that a specific student has been a part of</summary>
            <param name="id">The Student id</param>
            <returns>The membership information that the student is a part of</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Put(System.Int32,Gordon360.Models.MEMBERSHIP)">
            <summary>Update an existing membership item</summary>
            <param name="id">The membership id of whichever one is to be changed</param>
            <param name="membership">The content within the membership that is to be changed and what it will change to</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Delete(System.Int32)">
            <summary>Delete an existing membership</summary>
            <param name="id">The identifier for the membership to be deleted</param>
            <remarks>Calls the server to make a call and remove the given membership from the database</remarks>
        </member>
        <member name="F:Gordon360.Repositories.GenericRepository`1._context">
            <summary>
                The database context for the repository
            </summary>
        </member>
        <member name="F:Gordon360.Repositories.GenericRepository`1._dbSet">
            <summary>
                The data set of the repository
            </summary>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.#ctor(Gordon360.Models.CCTEntities1)">
            <summary>
                Initializes a new instance of the <see cref="T:Gordon360.Repositories.GenericRepository`1" /> class.
            </summary>
            <param name="context">The context for the repository</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetById(System.Int32)">
            <summary>
                Gets single entity by id
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetById(System.String)">
            <summary>
                Gets single entity by id
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetAll">
            <summary>
                Gets all entities
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Gets all entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>All entities matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Set based on where condition
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The records matching the given condition</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Finds an entity matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Determines if there are any entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the first entity that matches the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the first entity that matches the predicate else null
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate else null</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Add(`0)">
            <summary>
                Adds a given entity to the context
            </summary>
            <param name="entity">The entity to add to the context</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Delete(`0)">
            <summary>
                Deletes a given entity from the context
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Attach(`0)">
            <summary>
                Attaches a given entity to the context
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.ExecWithStoredProcedure(System.String,System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="query">Name of the stored procedure </param>
            <param name="parameters">Parameters to pass to the stored procedure</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetById(System.Int32)">
            <summary>
            Gets entity by Id
            </summary>        
            <returns>Specific enitity</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetById(System.String)">
            <summary>
            Gets entity by Id
            </summary>        
            <returns>Specific enitity</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetAll">
            <summary>
            Gets all entities
            </summary>        
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets all entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>All entities matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Set based on where condition
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The records matching the given condition</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds an entity matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determines if there are any entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first entity that matches the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first entity that matches the predicate else null
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate else null</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Add(`0)">
            <summary>
            Adds a given entity to the context
            </summary>
            <param name="entity">The entity to add to the context</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Delete(`0)">
            <summary>
            Deletes a given entity from the context
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.DeleteCollection(`0,System.String,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Delete the child collection
            </summary>
            <param name="entity"></param>
            <param name="collectionName"></param>
            <param name="collectionToRemove"></param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Attach(`0)">
            <summary>
            Attaches a given entity to the context
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.ExecWithStoredProcedure(System.String,System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="query">Name of the stored procedure </param>
            <param name="parameters">Parameters to pass to the stored procedure</param>
        </member>
        <member name="T:Gordon360.Services.AccountService">
            <summary>
            Service Class that facilitates data transactions between the AccountsController and the Account database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AccountService.Get(System.String)">
            <summary>
            Fetches a single account record whose id matches the id provided as an argument
            </summary>
            <param name="id">The person's gordon id</param>
            <returns>AccountViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAll">
            <summary>
            Fetches all the account records from storage.
            </summary>
            <returns>AccountViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="T:Gordon360.Services.ActivityInfoService">
            <summary>
            Service class for facilitation data transfers between the front end views and the backend database models
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityInfoService.Get(System.String)">
            <summary>
            Fetches the activity info whose Activity Code is specified as a parameter
            </summary>
            <param name="id">The activity code</param>
            <returns>An ActivityViewModel if one was found, null if none were found.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityInfoService.GetAll">
            <summary>
            Fetches all available activity info from the database
            </summary>
            <returns>ActivityInfoViewModel IEnumerable. If nothing was found, an empty IEnumerable is returned</returns>
        </member>
        <member name="T:Gordon360.Services.ActivityService">
            <summary>
            Service Class that facilitates data transactions between the ActivitiesController and the ACT_CLUB_DEF database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Get(System.String)">
            <summary>
            Fetches a single activity record whose id matches the id provided as an argument
            </summary>
            <param name="id">The activity code</param>
            <returns>ActivityViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivitiesForSession(System.String)">
            <summary>
            Fetches the Activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="id">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetAll">
            <summary>
            Fetches all activity records from storage.
            </summary>
            <returns>ActivityViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="T:Gordon360.Services.AdministratorService">
            <summary>
            Service class to facilitate interacting with teh Admin table.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.Int32)">
            <summary>
            Fetches the admin resource whose id is specified as an argument.
            </summary>
            <param name="id">The admin ID.l</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.String)">
            <summary>
            Fetches the admin resource whose username matches the specified argument
            </summary>
            <param name="gordon_id">The administrator's gordon id</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.GetAll">
            <summary>
            Fetches all the administrators from the database
            </summary>
            <returns>Returns a list of administrators. If no administrators were found, an empty list is returned.</returns>
        </member>
        <member name="T:Gordon360.Services.ComplexQueries.RawSqlQuery`1">
            <summary>
            Helper class to execute Sql statements.
            </summary>
            <typeparam name="T">The class to which the result will be bound</typeparam>
        </member>
        <member name="M:Gordon360.Services.ComplexQueries.RawSqlQuery`1.query(System.String,System.Object[])">
            <summary>
            Execute the sql query
            </summary>
            <param name="query">An sql statment. Can be a stored procedure or even a simple SELECT statment</param>
            <param name="parameters">Parameters to pass into the stored procedure</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.FacultyService">
            <summary>
            Service Class that facilitates data transactions between the FacultyController and the Faculty database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.FacultyService.Get(System.String)">
            <summary>
            Fetches the faculty member whose gordon id is specified as the parameter.
            </summary>
            <param name="id">The gordon id</param>
            <returns>If found returns FacultyViewModel, if not returns null</returns>
        </member>
        <member name="M:Gordon360.Services.FacultyService.GetAll">
            <summary>
            Fetches all the Faculty members from the database.
            </summary>
            <returns>FacultyViewModel IEnumerable. If no records are found an empty IEnumerable is returned.</returns>
        </member>
        <member name="T:Gordon360.Services.JenzibarActivityService">
            <summary>
            Service class to faclitate data transfers between in and out of the JNZB_ACTIVITIES table.
            This is a special class whose contents might not end up being exposed. The original idea 
            was for this class to represent all the memberships that would be moved to Jenzibar.
            We have not reached that point yet though.
            </summary>
        </member>
        <member name="T:Gordon360.Services.MembershipRequestService">
            <summary>
            Service class to facilitate data transactions between the MembershipRequestController and the database
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Add(Gordon360.Models.REQUEST)">
            <summary>
            Generate a new request to join an activity at a participation level higher than 'Guest'
            </summary>
            <param name="membershipRequest">The membership request object</param>
            <returns>The membership request object once it is added</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.ApproveRequest(System.Int32)">
            <summary>
            Approves the request with the specified ID.
            </summary>
            <param name="id">The ID of the request to be approved</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Delete(System.Int32)">
            <summary>
            Delete the membershipRequest object whose id is given in the parameters 
            </summary>
            <param name="id">The membership request id</param>
            <returns>A copy of the deleted membership request</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.DenyRequest(System.Int32)">
            <summary>
            Denies the membership request object whose id is given in the parameters
            </summary>
            <param name="id">The membership request id</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Get(System.Int32)">
            <summary>
            Get the membership request object whose Id is specified in the parameters.
            </summary>
            <param name="id">The membership request id</param>
            <returns>If found, returns MembershipRequestViewModel. If not found, returns null.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetAll">
            <summary>
            Fetches all the membership request objects from the database.
            </summary>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForActivity(System.String)">
            <summary>
            Fetches all the membership requests associated with this activity
            </summary>
            <param name="id">The activity id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForStudent(System.String)">
            <summary>
            Fetches all the membership requests associated with this student
            </summary>
            <param name="id">The student id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Update(System.Int32,Gordon360.Models.REQUEST)">
            <summary>
            Update an existing membership request object
            </summary>
            <param name="id">The membership request id</param>
            <param name="membershipRequest">The newly modified membership request</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.MembershipService">
            <summary>
            Service Class that facilitates data transactions between the MembershipsController and the Membership database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Add(Gordon360.Models.MEMBERSHIP)">
            <summary>
            Adds a new Membership record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the membershipIsValid() method.
            </summary>
            <param name="membership">The membership to be added</param>
            <returns>The newly added Membership object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Delete(System.Int32)">
            <summary>
            Delete the membership whose id is specified by the parameter.
            </summary>
            <param name="id">The membership id</param>
            <returns>The membership that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Get(System.Int32)">
            <summary>
            Fetch the membership whose id is specified by the parameter
            </summary>
            <param name="id">The membership id</param>
            <returns>MembershipViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetAll">
            <summary>
            Fetches all membership records from storage.
            </summary>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetLeaderMembershipsForActivity(System.String)">
            <summary>
            Fetches the leaders of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForActivity(System.String)">
            <summary>
            Fetches the memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForStudent(System.String)">
            <summary>
            Fetches all the membership information linked to the student whose id appears as a parameter.
            </summary>
            <param name="id">The student id.</param>
            <returns>A MembershipViewModel IEnumerable. If nothing is found, an empty IEnumberable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Update(System.Int32,Gordon360.Models.MEMBERSHIP)">
            <summary>
            Updates the membership whose id is given as the first parameter to the contents of the second parameter.
            </summary>
            <param name="id">The membership id.</param>
            <param name="membership">The updated membership.</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.membershipIsValid(Gordon360.Models.MEMBERSHIP)">
            <summary>
            Helper method to check for the validity of a membership.
            </summary>
            <param name="membership">The membership to validate</param>
            <returns>True if the membership is valid. False if it isn't</returns>
        </member>
        <member name="T:Gordon360.Services.ParticipationService">
            <summary>
            Service class that facilitates data passing between the ParticipationsController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ParticipationService.Get(System.String)">
            <summary>
            Fetches the participation record whose id matches the given parameter.
            </summary>
            <param name="id">The participation id.</param>
            <returns>If found, returns ParticipationViewModel, if not returns null.</returns>
        </member>
        <member name="M:Gordon360.Services.ParticipationService.GetAll">
            <summary>
            Fetches all the participation records from the database
            </summary>
            <returns>Participation IEnumerable. If no records are found, returns an empty IEnumberable</returns>
        </member>
        <member name="T:Gordon360.Services.SessionService">
            <summary>
            Service class to facilitate data transactions between the Controller and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SessionService.Get(System.String)">
            <summary>
            Get the session record whose sesssion code matches the parameter.
            </summary>
            <param name="id">The session code.</param>
            <returns>A SessionViewModel if found, null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.SessionService.GetAll">
            <summary>
            Fetches all the session records from the database.
            </summary>
            <returns>A SessionViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="T:Gordon360.Services.StaffService">
            <summary>
            Service class to facilitate the data transactions between the controllers and the database models.
            </summary>
        </member>
        <member name="M:Gordon360.Services.StaffService.Get(System.String)">
            <summary>
            Fetches the staff record whose id matches the provided parameter.
            </summary>
            <param name="id">The staff's gordon id.</param>
            <returns>A StaffViewModel if the record exists, null if it doesn't.</returns>
        </member>
        <member name="M:Gordon360.Services.StaffService.GetAll">
            <summary>
            Fetches all the staff records from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.StudentService">
            <summary>
            Service Class to faciliatate data transactions between the controller and the database models.
            </summary>
        </member>
        <member name="M:Gordon360.Services.StudentService.Get(System.String)">
            <summary>
            Fetches the student record whose id number matches the parameter.
            </summary>
            <param name="id">The student id</param>
            <returns>A student view model if found, null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.StudentService.GetAll">
            <summary>
            Fetches all the Student records from the database.
            </summary>
            <returns>StudentViweModel IEnumberable. If nothing is found, an empty IEnumberable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.StudentService.GetByEmail(System.String)">
            <summary>
            Fetches the student record using the specified email address
            </summary>
            <param name="email">The Student email</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.SupervisorService">
            <summary>
            Service class to facilitate data transactions between the controller and the database models.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.Add(Gordon360.Models.SUPERVISOR)">
            <summary>
            Adds a new Supervisor record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the supervisorIsValid() method.
            </summary>
            <param name="supervisor">The supervisor to be added</param>
            <returns>The newly added SUPERVISOR object</returns>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.Delete(System.Int32)">
            <summary>
            Delete the supervisor whose id is specified by the parameter.
            </summary>
            <param name="id">The supervisor id</param>
            <returns>The supervisor that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.Get(System.Int32)">
            <summary>
            Fetch the supervisor whose id is specified by the parameter
            </summary>
            <param name="id">The supervisor id</param>
            <returns>SupervisorViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.GetSupervisorsForActivity(System.String)">
            <summary>
            Fetches the supervisors of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>SupervisorViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.GetAll">
            <summary>
            Fetches all supervisor records from storage.
            </summary>
            <returns>SupervisorViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.SupervisorService.supervisorIsValid(Gordon360.Models.SUPERVISOR)">
            <summary>
            Helper method to check for the validity of a supervisor.
            </summary>
            <param name="supervisor">The supervisor to validate</param>
            <returns>True if the supervisor is valid. False if it isn't</returns>
        </member>
        <member name="T:Gordon360.Static.Methods.Helpers">
            <summary>
            Service class for methods that are shared between all services.
            </summary>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetCurrentSession">
            <summary>
            Service method that gets the current session we are in.
            </summary>
            <returns>SessionViewModel of the current session. If no session is found for our current date, returns null.</returns>
        </member>
    </members>
</doc>
